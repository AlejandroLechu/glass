const sqliteClient = require('./sqliteClient');
const apiClient = require('./apiClient');

class SyncService {
    constructor() {
        this.isOnline = false;
        this.syncInProgress = false;
        this.syncQueue = [];
        this.currentUserId = 'default_user';
        
        // 주기적 동기화 (5분마다)
        this.syncInterval = setInterval(() => {
            this.performSync();
        }, 5 * 60 * 1000);
        
        // 초기 연결 상태 확인
        this.checkOnlineStatus();

        // 초기 SQLite 연결 (한 번만)
        try {
            sqliteClient.connect();
        } catch (e) {
            console.error('SQLite 초기화 실패:', e);
        }

        // 초기 사용자 상태 확인
        this.initializeCurrentUser();

        // 사용자 변경 이벤트 리스너 등록
        this.setupUserEventListeners();
    }

    async checkOnlineStatus() {
        try {
            this.isOnline = await apiClient.checkConnection();
            console.log(`동기화 서비스 - 온라인 상태: ${this.isOnline}`);
            
            if (this.isOnline) {
                // 온라인이면 즉시 동기화 수행
                this.performSync();
            }
        } catch (error) {
            this.isOnline = false;
            console.error('온라인 상태 확인 실패:', error);
        }
    }

    setUserId(userId) {
        console.log('[SyncService] setUserId 호출:', userId);
        this.currentUserId = userId || 'default_user';
        apiClient.setUserId(this.currentUserId);
        console.log('[SyncService] 사용자 ID 업데이트 완료:', this.currentUserId);
    }

    async initializeCurrentUser() {
        // electron 환경에서만 실행
        if (typeof window !== 'undefined' && window.require) {
            try {
                const { ipcRenderer } = window.require('electron');
                const userData = await ipcRenderer.invoke('get-current-user');
                console.log('[SyncService] 초기 사용자 데이터:', userData);
                
                if (userData && userData.id && userData.id !== 'default_user') {
                    console.log('[SyncService] 초기 사용자 ID 설정:', userData.id);
                    this.setUserId(userData.id);
                } else {
                    console.log('[SyncService] 기본 사용자 유지:', this.currentUserId);
                }
            } catch (error) {
                console.log('[SyncService] 초기 사용자 확인 실패:', error);
            }
        }
    }

    setupUserEventListeners() {
        // electron 환경에서만 실행
        if (typeof window !== 'undefined' && window.require) {
            try {
                const { ipcRenderer } = window.require('electron');
                
                // 사용자 변경 이벤트 리스너
                ipcRenderer.on('user-changed', (_, userData) => {
                    console.log('[SyncService] user-changed 이벤트 수신:', userData);
                    if (userData && userData.id) {
                        this.setUserId(userData.id);
                    }
                });

                // 로그아웃 이벤트 리스너
                ipcRenderer.on('user-logged-out', () => {
                    console.log('[SyncService] user-logged-out 이벤트 수신');
                    this.setUserId('default_user');
                });
                
                console.log('[SyncService] 사용자 이벤트 리스너 등록 완료');
            } catch (error) {
                console.log('[SyncService] 이벤트 리스너 등록 실패:', error);
            }
        }
    }

    async performSync() {
        if (this.syncInProgress) {
            console.log('동기화가 이미 진행 중입니다.');
            return;
        }

        try {
            this.syncInProgress = true;
            console.log('데이터 동기화 시작...');

            // 온라인 상태 재확인
            await this.checkOnlineStatus();
            
            if (!this.isOnline) {
                console.log('오프라인 상태 - 동기화 스킵');
                return;
            }

            // 사용자 데이터 동기화
            await this.syncUserData();
            
            // 프리셋 동기화 (읽기 전용)
            await this.syncPresets();
            
            // 대기 중인 동기화 작업 처리
            await this.processSyncQueue();
            
            console.log('데이터 동기화 완료');
        } catch (error) {
            console.error('동기화 실패:', error);
        } finally {
            this.syncInProgress = false;
        }
    }

    async syncUserData() {
        try {
            // 로컬 사용자 데이터 가져오기
            const localUser = await sqliteClient.getOrCreateUser(this.currentUserId);
            
            // 웹에서 사용자 데이터 가져오기
            const webProfile = await apiClient.getUserProfile();
            const webContext = await apiClient.getUserContext();
            const webActivities = await apiClient.getUserActivities();
            const webPresets = await apiClient.getUserPresets();

            // 웹 프리셋을 로컬 DB에 저장
            if (webPresets && webPresets.length > 0) {
                console.log('웹에서 로컬로 사용자 데이터 동기화');
                console.log('웹 프리셋 데이터:', webPresets);
                await this.updateLocalUserPresets(webPresets);
            }

            console.log('사용자 데이터 동기화 완료');
        } catch (error) {
            console.error('사용자 데이터 동기화 실패:', error);
        }
    }

    async syncPresets() {
        try {
            // 웹에서 최신 사용자 프리셋 가져오기 (읽기 전용)
            const webPresets = await apiClient.getUserPresets();
            
            if (webPresets && webPresets.length > 0) {
                console.log('웹에서 프리셋 동기화:', webPresets.length, '개');
                // 필요시 로컬 캐시 업데이트 로직 추가
            }

            console.log('프리셋 동기화 완료');
        } catch (error) {
            console.error('프리셋 동기화 실패:', error);
        }
    }

    // 동기화 큐에 작업 추가
    addToSyncQueue(action, data) {
        this.syncQueue.push({
            action,
            data,
            timestamp: Date.now(),
            userId: this.currentUserId
        });

        // 온라인이면 즉시 처리
        if (this.isOnline && !this.syncInProgress) {
            this.processSyncQueue();
        }
    }

    async processSyncQueue() {
        if (this.syncQueue.length === 0) return;

        console.log(`동기화 큐 처리: ${this.syncQueue.length}개 작업`);

        const completedItems = [];

        for (const item of this.syncQueue) {
            try {
                await this.processQueueItem(item);
                completedItems.push(item);
            } catch (error) {
                console.error('큐 아이템 처리 실패:', error);
                // 실패한 항목은 큐에 유지 (나중에 재시도)
            }
        }

        // 성공한 항목들을 큐에서 제거
        this.syncQueue = this.syncQueue.filter(item => 
            !completedItems.some(completed => 
                completed.timestamp === item.timestamp && 
                completed.action === item.action
            )
        );

        console.log(`동기화 큐 처리 완료. 남은 작업: ${this.syncQueue.length}개`);
    }

    async processQueueItem(item) {
        const { action, data, userId } = item;

        // 사용자 ID 설정
        if (userId !== this.currentUserId) {
            this.setUserId(userId);
        }

        switch (action) {
            case 'ADD_ACTIVITY':
                await apiClient.addActivity(data);
                break;
            case 'UPDATE_CONTEXT':
                await apiClient.updateUserContext(data);
                break;
            case 'UPDATE_PROFILE':
                await apiClient.updateUserProfile(data);
                break;
            case 'SAVE_CONVERSATION':
                await apiClient.saveConversationSession(data.sessionId, data.conversationHistory, data.userId);
                break;
            default:
                console.warn('알 수 없는 동기화 액션:', action);
        }
    }

    // 공개 메서드들 - 다른 모듈에서 호출할 수 있는 인터페이스

    async addActivity(activity) {
        try {
            if (this.isOnline) {
                // 온라인이면 즉시 API 호출
                await apiClient.addActivity(activity);
                console.log('활동 즉시 동기화 완료');
            } else {
                // 오프라인이면 큐에 추가
                this.addToSyncQueue('ADD_ACTIVITY', activity);
                console.log('활동을 동기화 큐에 추가');
            }
        } catch (error) {
            console.error('활동 추가 실패:', error);
            // API 호출 실패 시 큐에 추가
            this.addToSyncQueue('ADD_ACTIVITY', activity);
        }
    }

    async updateUserContext(context) {
        try {
            if (this.isOnline) {
                await apiClient.updateUserContext(context);
                console.log('컨텍스트 즉시 동기화 완료');
            } else {
                this.addToSyncQueue('UPDATE_CONTEXT', context);
                console.log('컨텍스트를 동기화 큐에 추가');
            }
        } catch (error) {
            console.error('컨텍스트 업데이트 실패:', error);
            this.addToSyncQueue('UPDATE_CONTEXT', context);
        }
    }

    async updateUserProfile(profile) {
        try {
            if (this.isOnline) {
                await apiClient.updateUserProfile(profile);
                console.log('프로필 즉시 동기화 완료');
            } else {
                this.addToSyncQueue('UPDATE_PROFILE', profile);
                console.log('프로필을 동기화 큐에 추가');
            }
        } catch (error) {
            console.error('프로필 업데이트 실패:', error);
            this.addToSyncQueue('UPDATE_PROFILE', profile);
        }
    }

    // 읽기 전용 메서드들 (personalize prompt는 웹에서만 수정)
    async getUserPresets() {
        try {
            console.log('[SyncService] getUserPresets 호출');
            console.log('[SyncService] 현재 사용자 ID:', this.currentUserId);
            console.log('[SyncService] 온라인 상태:', this.isOnline);
            
            if (this.isOnline) {
                console.log('[SyncService] API에서 프리셋 조회 중...');
                const result = await apiClient.getUserPresets();
                console.log('[SyncService] API 응답:', result);
                
                // API에서 가져온 데이터를 로컬 DB에 저장
                if (result && result.length > 0) {
                    console.log('[SyncService] API 프리셋을 로컬 DB에 저장');
                    await this.updateLocalUserPresets(result);
                }
                
                return result;
            } else {
                console.log('[SyncService] 오프라인 - 로컬 캐시 사용');
                // 오프라인 시 로컬 캐시 반환
                const user = await sqliteClient.getOrCreateUser(this.currentUserId);
                console.log('[SyncService] 로컬 사용자 데이터:', user);
                return user.presets || [];
            }
        } catch (error) {
            console.error('사용자 프리셋 조회 실패:', error);
            console.log('[SyncService] 에러 발생 - 로컬 데이터 사용');
            // 실패 시 로컬 데이터 반환
            const user = await sqliteClient.getOrCreateUser(this.currentUserId);
            console.log('[SyncService] 로컬 사용자 데이터:', user);
            return user.presets || [];
        }
    }

    async getPresetTemplates() {
        try {
            if (this.isOnline) {
                return await apiClient.getPresetTemplates();
            } else {
                return await sqliteClient.getPresetTemplates();
            }
        } catch (error) {
            console.error('프리셋 템플릿 조회 실패:', error);
            return await sqliteClient.getPresetTemplates();
        }
    }

    // 대화 세션 관련 메서드들
    async saveConversationSession(sessionId, conversationHistory, userId = null) {
        const effectiveUserId = userId || this.currentUserId;
        
        try {
            // 먼저 로컬에 저장
            await sqliteClient.saveConversationSession(sessionId, conversationHistory, effectiveUserId);
            
            if (this.isOnline) {
                // 온라인이면 즉시 API 호출
                await apiClient.saveConversationSession(sessionId, conversationHistory, effectiveUserId);
                console.log('대화 세션 즉시 동기화 완료');
            } else {
                // 오프라인이면 큐에 추가
                this.addToSyncQueue('SAVE_CONVERSATION', {
                    sessionId,
                    conversationHistory,
                    userId: effectiveUserId
                });
                console.log('대화 세션을 동기화 큐에 추가');
            }
        } catch (error) {
            console.error('대화 세션 저장 실패:', error);
            // API 호출 실패 시 큐에 추가
            this.addToSyncQueue('SAVE_CONVERSATION', {
                sessionId,
                conversationHistory,
                userId: effectiveUserId
            });
        }
    }

    async getConversationSession(sessionId) {
        try {
            if (this.isOnline) {
                // 온라인이면 API에서 조회
                return await apiClient.getConversationSession(sessionId);
            } else {
                // 오프라인이면 로컬 DB에서 조회
                return await sqliteClient.getConversationSession(sessionId);
            }
        } catch (error) {
            console.error('대화 세션 조회 실패:', error);
            // 실패 시 로컬 DB에서 조회
            return await sqliteClient.getConversationSession(sessionId);
        }
    }

    async getAllConversationSessions(userId = null) {
        const effectiveUserId = userId || this.currentUserId;
        
        try {
            if (this.isOnline) {
                // 온라인이면 API에서 조회
                return await apiClient.getAllConversationSessions();
            } else {
                // 오프라인이면 로컬 DB에서 조회
                return await sqliteClient.getAllConversationSessions(effectiveUserId);
            }
        } catch (error) {
            console.error('대화 세션 목록 조회 실패:', error);
            // 실패 시 로컬 DB에서 조회
            return await sqliteClient.getAllConversationSessions(effectiveUserId);
        }
    }

    async deleteConversationSession(sessionId) {
        try {
            if (this.isOnline) {
                // 온라인이면 API 호출
                await apiClient.deleteConversationSession(sessionId);
                console.log('대화 세션 삭제 즉시 동기화 완료');
            }
            
            // 로컬에서도 삭제 (오프라인 대응)
            // 로컬 삭제 메서드는 SQLite 클라이언트에 추가 필요
            console.log('대화 세션 삭제 완료');
        } catch (error) {
            console.error('대화 세션 삭제 실패:', error);
            throw error;
        }
    }

    // 로컬 DB의 사용자 프리셋 업데이트
    async updateLocalUserPresets(webPresets) {
        try {
            console.log('[SyncService] 로컬 DB에 웹 프리셋 저장 시작');
            console.log('[SyncService] 저장할 프리셋:', webPresets);
            
            // sqliteClient에 사용자 프리셋 업데이트 메서드 호출
            await sqliteClient.updateUserPresets(this.currentUserId, webPresets);
            
            console.log('[SyncService] 로컬 DB 프리셋 업데이트 완료');
        } catch (error) {
            console.error('[SyncService] 로컬 DB 프리셋 업데이트 실패:', error);
        }
    }

    // 정리 메서드
    destroy() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
        }
        console.log('동기화 서비스 정리 완료');
    }
}

// 싱글톤 인스턴스
const syncService = new SyncService();

module.exports = syncService; 
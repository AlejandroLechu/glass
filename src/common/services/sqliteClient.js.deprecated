const sqlite3 = require('sqlite3').verbose();
const path = require('path');

class SQLiteClient {
    constructor() {
        this.db = null;
        this.dbPath = path.join(__dirname, '../../../data/pickleglass.db');
    }

    async connect() {
        return new Promise((resolve, reject) => {
            this.db = new sqlite3.Database(this.dbPath, (err) => {
                if (err) {
                    console.error('SQLite 연결 실패:', err);
                    reject(err);
                } else {
                    console.log(`SQLite 연결 성공: ${this.dbPath}`);
                    this.initTables().then(resolve).catch(reject);
                }
            });
        });
    }

    async initTables() {
        return new Promise((resolve, reject) => {
            // 기존 대화 세션 테이블 생성
            const createSessionsTable = `
                CREATE TABLE IF NOT EXISTS conversation_sessions (
                    sessionId TEXT PRIMARY KEY,
                    timestamp INTEGER NOT NULL,
                    conversationHistory TEXT NOT NULL,
                    lastUpdated INTEGER NOT NULL,
                    userId TEXT DEFAULT 'default_user'
                )
            `;

            // 사용자 테이블 생성 (웹 백엔드와 동일)
            const createUsersTable = `
                CREATE TABLE IF NOT EXISTS users (
                    _id TEXT PRIMARY KEY,
                    name TEXT,
                    email TEXT,
                    context TEXT,
                    activities TEXT,
                    presets TEXT,
                    created_at TIMESTAMP,
                    updated_at TIMESTAMP
                )
            `;

            // 프리셋 템플릿 테이블 생성
            const createPresetTemplatesTable = `
                CREATE TABLE IF NOT EXISTS preset_templates (
                    _id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    prompt TEXT NOT NULL,
                    is_default BOOLEAN NOT NULL
                )
            `;

            // 사용자별 대화 세션 관리 테이블
            const createUserConversationsTable = `
                CREATE TABLE IF NOT EXISTS user_conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    userId TEXT NOT NULL,
                    sessionId TEXT NOT NULL,
                    title TEXT,
                    summary TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (userId) REFERENCES users(_id),
                    FOREIGN KEY (sessionId) REFERENCES conversation_sessions(sessionId)
                )
            `;

            // 테이블들을 순차적으로 생성
            this.db.run(createUsersTable, (err) => {
                if (err) {
                    console.error('사용자 테이블 생성 실패:', err);
                    reject(err);
                    return;
                }
                
                this.db.run(createPresetTemplatesTable, (err) => {
                    if (err) {
                        console.error('프리셋 템플릿 테이블 생성 실패:', err);
                        reject(err);
                        return;
                    }
                    
                    this.db.run(createSessionsTable, (err) => {
                        if (err) {
                            console.error('대화 세션 테이블 생성 실패:', err);
                            reject(err);
                            return;
                        }
                        
                        this.db.run(createUserConversationsTable, (err) => {
                            if (err) {
                                console.error('사용자 대화 테이블 생성 실패:', err);
                                reject(err);
                            } else {
                                console.log('모든 테이블 준비 완료');
                                this.initDefaultData().then(resolve).catch(reject);
                            }
                        });
                    });
                });
            });
        });
    }

    async initDefaultData() {
        return new Promise((resolve, reject) => {
            // 기본 프리셋 템플릿 데이터 삽입
            const presetTemplates = [
                {
                    "_id": "school",
                    "title": "School",
                    "prompt": "You are a school and lecture assistant. Your goal is to help the user, a student, understand academic material and answer questions.\n\nWhenever a question appears on the user's screen or is asked aloud, you provide a direct, step-by-step answer, showing all necessary reasoning or calculations.\n\nIf the user is watching a lecture or working through new material, you offer concise explanations of key concepts and clarify definitions as they come up.",
                    "is_default": true
                },
                {
                    "_id": "meetings",
                    "title": "Meetings",
                    "prompt": "You are a meeting assistant. Your goal is to help the user capture key information during meetings and follow up effectively.\n\nYou help capture meeting notes, track action items, identify key decisions, and summarize important points discussed during meetings.",
                    "is_default": true
                },
                {
                    "_id": "sales",
                    "title": "Sales",
                    "prompt": "You are a real-time AI sales assistant, and your goal is to help the user close deals during sales interactions.\n\nYou provide real-time sales support, suggest responses to objections, help identify customer needs, and recommend strategies to advance deals.",
                    "is_default": true
                },
                {
                    "_id": "recruiting",
                    "title": "Recruiting",
                    "prompt": "You are a recruiting assistant. Your goal is to help the user interview candidates and evaluate talent effectively.\n\nYou help evaluate candidates, suggest interview questions, analyze responses, and provide insights about candidate fit for positions.",
                    "is_default": true
                },
                {
                    "_id": "customer-support",
                    "title": "Customer Support",
                    "prompt": "You are a customer support assistant. Your goal is to help resolve customer issues efficiently and thoroughly.\n\nYou help diagnose customer problems, suggest solutions, provide step-by-step troubleshooting guidance, and ensure customer satisfaction.",
                    "is_default": true
                }
            ];

            let insertCount = 0;
            const totalInserts = presetTemplates.length;

            presetTemplates.forEach(preset => {
                this.db.run(
                    `INSERT OR IGNORE INTO preset_templates (_id, title, prompt, is_default) VALUES (?, ?, ?, ?)`,
                    [preset._id, preset.title, preset.prompt, preset.is_default],
                    (err) => {
                        if (err) {
                            console.error('프리셋 템플릿 삽입 실패:', err);
                            reject(err);
                            return;
                        }
                        insertCount++;
                        if (insertCount === totalInserts) {
                            console.log('기본 데이터 초기화 완료');
                            resolve();
                        }
                    }
                );
            });
        });
    }

    // 사용자 관련 메서드들
    async getOrCreateUser(userId = 'default_user') {
        return new Promise((resolve, reject) => {
            const query = 'SELECT * FROM users WHERE _id = ?';
            
            this.db.get(query, [userId], (err, row) => {
                if (err) {
                    console.error('사용자 조회 실패:', err);
                    reject(err);
                } else if (row) {
                    resolve({
                        id: row._id,
                        name: row.name,
                        email: row.email,
                        context: row.context ? JSON.parse(row.context) : null,
                        activities: row.activities ? JSON.parse(row.activities) : [],
                        presets: row.presets ? JSON.parse(row.presets) : [],
                        created_at: row.created_at,
                        updated_at: row.updated_at
                    });
                } else {
                    // 사용자가 없으면 생성
                    this.createDefaultUser(userId).then(resolve).catch(reject);
                }
            });
        });
    }

    async createDefaultUser(userId) {
        return new Promise((resolve, reject) => {
            // 기본 프리셋 가져오기
            this.getPresetTemplates().then(defaultPresets => {
                const now = new Date().toISOString();
                const userData = {
                    _id: userId,
                    name: "User",
                    email: "user@example.com",
                    context: JSON.stringify(null),
                    activities: JSON.stringify([]),
                    presets: JSON.stringify(defaultPresets),
                    created_at: now,
                    updated_at: now
                };

                this.db.run(
                    `INSERT INTO users (_id, name, email, context, activities, presets, created_at, updated_at)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
                    [userData._id, userData.name, userData.email, userData.context, 
                     userData.activities, userData.presets, userData.created_at, userData.updated_at],
                    function(err) {
                        if (err) {
                            console.error('사용자 생성 실패:', err);
                            reject(err);
                        } else {
                            console.log(`사용자 생성 완료: ${userId}`);
                            resolve({
                                id: userData._id,
                                name: userData.name,
                                email: userData.email,
                                context: null,
                                activities: [],
                                presets: defaultPresets,
                                created_at: userData.created_at,
                                updated_at: userData.updated_at
                            });
                        }
                    }
                );
            }).catch(reject);
        });
    }

    async saveConversationSession(sessionId, conversationHistory, userId = 'default_user') {
        return new Promise((resolve, reject) => {
            const query = `
                INSERT OR REPLACE INTO conversation_sessions 
                (sessionId, timestamp, conversationHistory, lastUpdated, userId)
                VALUES (?, ?, ?, ?, ?)
            `;
            
            const timestamp = parseInt(sessionId);
            const now = Date.now();
            const historyJson = JSON.stringify(conversationHistory);

            this.db.run(query, [sessionId, timestamp, historyJson, now, userId], function(err) {
                if (err) {
                    console.error('대화 세션 저장 실패:', err);
                    reject(err);
                } else {
                    console.log(`대화 세션 저장 완료: ${sessionId} (사용자: ${userId})`);
                    resolve({ sessionId, changes: this.changes });
                }
            });
        });
    }

    async getConversationSession(sessionId) {
        return new Promise((resolve, reject) => {
            const query = 'SELECT * FROM conversation_sessions WHERE sessionId = ?';
            
            this.db.get(query, [sessionId], (err, row) => {
                if (err) {
                    console.error('대화 세션 조회 실패:', err);
                    reject(err);
                } else if (row) {
                    resolve({
                        sessionId: row.sessionId,
                        timestamp: row.timestamp,
                        conversationHistory: JSON.parse(row.conversationHistory),
                        lastUpdated: row.lastUpdated,
                        userId: row.userId || 'default_user'
                    });
                } else {
                    resolve(null);
                }
            });
        });
    }

    async getAllConversationSessions(userId = null) {
        return new Promise((resolve, reject) => {
            let query = 'SELECT * FROM conversation_sessions';
            let params = [];
            
            if (userId) {
                query += ' WHERE userId = ?';
                params.push(userId);
            }
            
            query += ' ORDER BY timestamp DESC';
            
            this.db.all(query, params, (err, rows) => {
                if (err) {
                    console.error('대화 세션 조회 실패:', err);
                    reject(err);
                } else {
                    const sessions = rows.map(row => ({
                        sessionId: row.sessionId,
                        timestamp: row.timestamp,
                        conversationHistory: JSON.parse(row.conversationHistory),
                        lastUpdated: row.lastUpdated,
                        userId: row.userId || 'default_user'
                    }));
                    resolve(sessions);
                }
            });
        });
    }

    async getPresetTemplates() {
        return new Promise((resolve, reject) => {
            const query = 'SELECT _id, title, prompt FROM preset_templates WHERE is_default = 1';
            
            this.db.all(query, [], (err, rows) => {
                if (err) {
                    console.error('프리셋 템플릿 조회 실패:', err);
                    reject(err);
                } else {
                    const templates = rows.map(row => ({
                        id: row._id,
                        title: row.title,
                        prompt: row.prompt
                    }));
                    resolve(templates);
                }
            });
        });
    }

    async updateUserPresets(userId, presets) {
        return new Promise((resolve, reject) => {
            const query = `
                UPDATE users 
                SET presets = ?, updated_at = ?
                WHERE _id = ?
            `;
            
            const presetsJson = JSON.stringify(presets);
            const now = new Date().toISOString();

            this.db.run(query, [presetsJson, now, userId], function(err) {
                if (err) {
                    console.error('사용자 프리셋 업데이트 실패:', err);
                    reject(err);
                } else {
                    console.log(`사용자 프리셋 업데이트 완료: ${userId} (변경된 행: ${this.changes})`);
                    resolve({ userId, changes: this.changes });
                }
            });
        });
    }

    close() {
        if (this.db) {
            this.db.close((err) => {
                if (err) {
                    console.error('SQLite 연결 종료 실패:', err);
                } else {
                    console.log('SQLite 연결 종료 완료');
                }
            });
        }
    }
}

// 싱글톤 인스턴스
const sqliteClient = new SQLiteClient();

module.exports = sqliteClient; 